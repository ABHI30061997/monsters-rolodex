{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAM,SAAAC,GACf,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFbC,G,MAAU,SAAAR,GACnB,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GACpB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCN5BM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAYC,EAAmB,EAAnBA,aAC5B,OACA,uBACAC,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCCG,E,kDA/Bb,aAAe,IAAD,8BACZ,gBACKC,MAAO,CACVR,SAAS,GACTS,YAAa,IAJH,E,qDAOd,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAY,OAAOA,EAASC,UACjCF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACf,SAASc,S,oBAGvC,WAAS,IAAD,OAEN,EAA8BE,KAAKR,MAA5BR,EAAP,EAAOA,SAASS,EAAhB,EAAgBA,YACVQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GACvC,OAAQA,EAAQE,KAAKsB,cAAeC,SAASX,EAAYU,kBAE5D,OACA,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAAAiB,GACrD,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,QAAO,kBAAIC,QAAQC,IAAI,EAAKjB,aAElE,cAAC,EAAD,CAAUR,SAAUiB,W,GA1BRS,aCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8829ef47.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card= props=> {\n    return(\n    <div className='card-container'>\n        <img alt='monster' src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n\n    </div>\n    \n    )};","import React from 'react'\n\nimport {Card} from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList= props=>{\n    return(\n    <div className='card-list'>\n        {props.monsters.map(monster=> {\n        return(<Card key={monster.id} monster={monster}></Card>)\n    })}\n    </div>\n    )}","import React from 'react';\n\nimport './search-box.styles.css';\n\nconst SearchBox = ({placeholder,handleChange}) =>  { \n    return(\n    <input \n    type=\"search\" \n    placeholder={placeholder}\n    onChange={handleChange}>\n    </input>\n    )}\nexport {SearchBox}","import './App.css';\n\nimport React, {Component} from 'react';\n\nimport './components/card-list/card-list.component'\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state ={\n      monsters:[],\n      searchField: \"\"\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=> {return(response.json())})\n    .then(users=>this.setState({monsters:users}))\n  \n  }\n  render(){\n\n    const {monsters,searchField}= this.state\n    const filteredMonsters = monsters.filter( monster=>\n      {return((monster.name.toLowerCase()).includes(searchField.toLowerCase()))})\n    \n    return(\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"Search Monsters\" handleChange={e=>{\n        this.setState({searchField:e.target.value},()=>console.log(this.state));}}></SearchBox>\n       \n      <CardList monsters={filteredMonsters}></CardList>   \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}